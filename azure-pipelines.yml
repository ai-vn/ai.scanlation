variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  NODE_CACHE_FOLDER: $(System.DefaultWorkingDirectory)/node_modules
  ELECTRON_CACHE: $(Pipeline.Workspace)/.cache
  JEST_CACHE: $(System.DefaultWorkingDirectory)/.cache/jest

pool:
  vmImage: 'windows-latest'
steps:
  - task: NodeTool@0
    displayName: Install NodeJS
    inputs:
      versionSpec: '12.x'
      checkLatest: true

  - task: Cache@2
    inputs:
      key: yarn | $(Agent.OS) | yarn.lock | azure-pipelines.yml
      path: $(YARN_CACHE_FOLDER)
      restoreKeys: |
        yarn | $(Agent.OS)
    displayName: Cache Yarn packages

  - task: Cache@2
    inputs:
      key: node | $(Agent.OS) | yarn.lock | azure-pipelines.yml
      path: $(NODE_CACHE_FOLDER)
    displayName: Cache Node Modules

  - task: Cache@2
    inputs:
      key: electron | $(Agent.OS) | yarn.lock | azure-pipelines.yml
      path: $(ELECTRON_CACHE)
    displayName: Cache Electron

  - task: Cache@2
    inputs:
      key: jest | $(Agent.OS) | __tests__/** | yarn.lock | azure-pipelines.yml
      path: $(JEST_CACHE)
    displayName: Cache Jest

  - script: |
      yarn --frozen-lockfile
    displayName: Install Dependencies

  - script: |
      yarn lint:js --max-warnings=0
      yarn lint:css
    displayName: Analyzes Source Code

  - script: |
      yarn test --ci
    displayName: Run Unit Tests
    continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish Jest Unit Test Results
    inputs:
      testResultsFiles: junit.xml
      mergeTestResults: true
      testRunTitle: 'Jest Unit Tests'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage from Jest tests
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'

  - script: |
      curl -s https://codecov.io/bash | bash
    displayName: Publish code coverage to codecov.io

  - script: |
      yarn build --publish never
    displayName: Build
    condition: and(succeeded(), notIn(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master'))
    env:
      ELECTRON_CACHE: $(ELECTRON_CACHE)
      ELECTRON_BUILDER_CACHE: $(ELECTRON_BUILDER_CACHE)

  - script: |
      yarn build --publish always
    displayName: Release (Windows)
    condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master'))
    env:
      GH_TOKEN: $(GH_TOKEN)
      ELECTRON_CACHE: $(ELECTRON_CACHE)
      ELECTRON_BUILDER_CACHE: $(ELECTRON_BUILDER_CACHE)
