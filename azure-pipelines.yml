variables:
  ELECTRON_CACHE: $(Pipeline.Workspace)/.cache/electron
  ELECTRON_BUILDER_CACHE: $(Pipeline.Workspace)/.cache/electron-builder
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

pool:
  vmImage: 'macOS-latest'
steps:
  - task: NodeTool@0
    displayName: Install NodeJS
    inputs:
      versionSpec: '10.x'
      checkLatest: true

  - task: Cache@2
    inputs:
      key: yarn | $(Agent.OS) | yarn.lock | azure-pipelines.yml
      path: $(YARN_CACHE_FOLDER)
      restoreKeys: |
        yarn | $(Agent.OS)
        yarn
    displayName: Cache Yarn packages

  - script: |
      yarn --frozen-lockfile
    displayName: Install Dependencies

  - script: |
      yarn lint:js --max-warnings=0
      yarn lint:css
    displayName: Analyzes Source Code

  - script: |
      yarn test --ci
    displayName: Run Unit Tests
    continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish Jest Unit Test Results
    inputs:
      testResultsFiles: junit.xml
      mergeTestResults: true
      testRunTitle: 'Jest Unit Tests'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage from Jest tests
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'

  - script: |
      yarn build
    displayName: Build
    condition: and(succeeded(), notIn(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master'))
    env:
      GH_TOKEN: $(GH_TOKEN)
      ELECTRON_CACHE: $(ELECTRON_CACHE)
      ELECTRON_BUILDER_CACHE: $(ELECTRON_BUILDER_CACHE)

  - script: |
      yarn release --mac --win
    displayName: Release (Mac & Win)
    condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master'))
    env:
      GH_TOKEN: $(GH_TOKEN)
      ELECTRON_CACHE: $(ELECTRON_CACHE)
      ELECTRON_BUILDER_CACHE: $(ELECTRON_BUILDER_CACHE)
