variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  ELECTRON_CACHE: $(Pipeline.Workspace)/.yarn/.cache/electron
  ELECTRON_BUILDER_CACHE: $(Pipeline.Workspace)/.yarn/.cache/electron-builder

pool:
  vmImage: 'macOS-latest'
steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
      checkLatest: true
    displayName: Install NodeJS

  - task: CacheBeta@0
    inputs:
      key: version2 | yarn | $(Agent.OS) | yarn.lock
      path: $(YARN_CACHE_FOLDER)
    displayName: Cache Yarn packages

  - script: |
      yarn --frozen-lockfile
    displayName: Install Dependencies

  - script: |
      yarn lint:js --max-warnings=0
      yarn lint:css
    displayName: Analyzes Source Code

  - script: |
      yarn test
    displayName: Run Unit Tests

  - script: |
      yarn build
    condition: and(succeeded(), notIn(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master'))
    env:
      GH_TOKEN: $(GH_TOKEN)
      ELECTRON_CACHE: $(ELECTRON_CACHE)
      ELECTRON_BUILDER_CACHE: $(ELECTRON_BUILDER_CACHE)
    displayName: Build

  - script: |
      yarn release --mac --win
    condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master'))
    env:
      GH_TOKEN: $(GH_TOKEN)
      ELECTRON_CACHE: $(ELECTRON_CACHE)
      ELECTRON_BUILDER_CACHE: $(ELECTRON_BUILDER_CACHE)
    displayName: Release (Mac & Win)
